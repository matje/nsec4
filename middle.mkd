# The NSEC4 Resource Record

The NSEC4 Resource Record (RR) provides authenticated denial of existence
for DNS RRsets.

The NSEC4 RR lists RR types present at the original owner name of the NSEC4 RR.
It includes the next (hashed) owner name in the (hash) order of the zone.
The complete set of NSEC4 RRs in a zone indicates which RRSets exist for the
original owner name of the RR and form a chain. This information is used to
provide authenticated denial of existence for DNS data. To provide protection
against zone enumeration, the owner names used in the NSEC4 RR can be
cryptographic hashes of the original owner name prepended as a single label
to the name of the zone. If hashing is used, the NSEC4 RR indicates which
hash function is used to construct the hash, which salt is used, and how many
iterations of the hash function are performed over the original owner name.

The hashing technique is described in Section 5 of [](#RFC5155).

(Hashed) owner names of unsigned delegations may be excluded from the chain.
A NSEC4 RR whose span covers an owner name or "next closer" name of an
unsigned delegation is referred to as an Opt-Out NSEC4 RR and is indicated by
the presence of a flag.

If hashing is in use, the owner name for the NSEC4 RR is the base32 encoding
of the hashed owner name prepended as a single label to the name of the zone.

The type value for the NSEC4 RR is [TBD].

The NSEC4 RR RDATA format is class independent and is described below.

The class MUST be the same as the class of the original owner name.

The NSEC4 RR SHOULD have the same TTL value as the SOA minimum TTL field.
This is in the spirit of negative caching [](#RFC2136).

## RDATA Fields

The NSEC4 RDATA has many similarities with NSEC3, but there are a few differences:

* There is an extra flag bit reserved to indicate whether wildcard name expansion is
  possible at the original owner name;
* the hash length does not need to be stored, as all domain names are stored as domain 
  names, not raw hashes;

### Hash Algorithm

[](#RFC5155) defines the NSEC3 hash algorithm registry. The zero
hash (hash algorithm 0) is reserved. For NSEC4 we define hash
algorithm zero to mean that nothing is hashed in the record.

### Flags

The Flags field is identical to the Flags field as defined in [](#RFC5155). 
This specification adds a new flag, the Wildcard Flag.

#### Opt-Out Flag

Like the Opt-Out Flag defined in Section 3.1.2.1 of [](#RFC5155).

#### Wildcard Flag

The Wildcard Flag indicates whether there exists a source of synthesis
at the original owner name of the NSEC4 RR. It is the second least significant
bit in the Flags field.

If the Wildcard flag is set, there exists a source of synthesis at the
original owner name of the NSEC4 RR.

If the Wildcard flag is clear, there does not exist a source of synthesis at the
original owner name of the NSEC4 RR.

### Iterations

Like the Iterations field defined in Section 3.1.3 of [](#RFC5155).

### Salt Length

Like the Salt Length field defined in Section 3.1.4 of [](#RFC5155).

### Salt

Like the Salt field defined in Section 3.1.5 of [](#RFC5155).

### Next (Hashed) Owner Name

The Next Owner Name field contains the next owner name that exists in the
definition of Section 2.2.3 of [](#RFC4592).

If zero hashing is used, the field contains the next owner name in the canonical
ordering of the zone, as explained in Section 6.1 of [](#RFC4034).

If hashing is in place, the field contains the next owner name in hash order.

A sender MUST NOT use DNS name compression on the Next Owner Name field when
transmitting an NSEC4 RR.

Owner names of RRsets for which the given zone is not authoritative
(such as glue records) MUST NOT be listed in the Next Owner Name
unless at least one authoritative RRset exists at the same owner name.

### Type Bit Maps

Like the Type But Maps field defined in Section 3.1.8 of [](#RFC5155).

## NSEC4 RDATA Wire Format

The RDATA of the NSEC4 RR is as shown below.

                         1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |   Hash Alg.   |     Flags     |          Iterations           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |  Salt Length  |                     Salt                      /
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    /                 Next (Hashed) Owner Name                      /
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                         Type Bit Maps                         /
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Hash Algorithm is a single octet. 

MM: If Hash Algorithm is zero (no hashing), we could omit the Iterations field,
    Salt Length field and Salt field.

Flags field is a single octet. The following one-bit flags are defined:

     0 1 2 3 4 5 6 7
    +-+-+-+-+-+-+-+-+
    |           |W|O|
    +-+-+-+-+-+-+-+-+

* O - Opt-Out flag
* W - Wildcard flag

Iterations is represented as a 16-bit unsigned integer, with the most
significant bit first. If no hashing should be applied the Hash Algorithm
field, the Salt Length field and the Salt field MUST be ignored.

Salt Length is represented as an unsigned octet.  Salt Length
represents the length of the Salt field in octets.  If the value is
zero, the following Salt field is omitted.

Salt, if present, is encoded as a sequence of binary octets.  The
length of this field is determined by the preceding Salt Length
field.

The Next (Hashed) Owner Name is a base32 encoded domain name,
if Hash Algorithm is not zero. If Hash Algorithm is zero it is a plain
domain name.

The Type Bit Maps encode the existing types at the original owner name
that matches the NSEC4 RR.

MM: We might be able to do something smart with the label count,
    like NSEC does.

Label Count is represented as a 8-bit unsigned integer, and represents the
number of labels of the owner name in its unhashed format. It is used to
determine the closest encloser of the name that matches the NSEC4 RR.

MM: But we still can't use it for NXDOMAIN responses. Unhashed NXDOMAIN is
    no problem, because the source of synthesis (*.closest_encloser)
    always is the next of the closest encloser. But hashed, this order is
    screwed.

## Presentation Format

The presentation format of the RDATA portion is as follows:

* The Hash Algorithm field is represented as an unsigned decimal
    integer. The value has a maximum of 255.

* The Flags field is represented as an unsigned decimal integer.
    The value has a maximum of 255.

* The Iterations field is represented as an unsigned decimal
    integer. The value is between 0 and 65535, inclusive.

* The Salt Length field is not represented.

* The Salt field is represented as a sequence of case-insensitive
  hexadecimal digits.  Whitespace is not allowed within the
  sequence.  The Salt field is represented as "-" (without the
  quotes) when the Salt Length field has a value of 0.

* The Next (Hashed) Owner Name field is represented as a domain name.

* The Type Bit Maps field is represented as a sequence of RR type
  mnemonics.  When the mnemonic is not known, the TYPE
  representation as described in Section 5 of [](#RFC3597) MUST be
  used.

NSEC record:

    example.org. NSEC a.example.org. NS SOA RRSIG DNSKEY NSEC3PARAM

NSEC3 record:

    15BG9L6359F5CH23E34DDUA6N1RIHL9H.example.org. NSEC3 1 0 2 DEAD
     22670TRPLHSR72PQQMEDLTG1KDQEOLB7 NS SOA RRSIG DNSKEY NSEC3PARAM

NSEC4 record with zero hashing:

    example.org. NSEC4 0 0 0 - a.example.org. NS SOA RRSIG DNSKEY NSEC4PARAM

NSEC4 record with hashing:

    15BG9L6359F5CH23E34DDUA6N1RIHL9H.example.org. NSEC4 1 0 2 DEAD
     22670TRPLHSR72PQQMEDLTG1KDQEOLB7.example.org.
     NS SOA RRSIG DNSKEY NSEC4PARAM

# The NSEC4PARAM Resource Record

Exactly like NSEC3PARAM described in Section 5 of [](#RFC5155),
except the type code used [TBD] is that of NSEC4PARAM.
