# Introduction

## Rationale
Authenticated denial of exitence proofs all hinge on the 
closest encloser proof (Section 7.2.1 and 8.3 of [](#RFC5155)). When validating
a denial of existence answer, a validator needs to know the next closer.
To know the next closer, you need to know the closest encloser. To deny
or assert a wildcard presence the source of synthesis is needed 
(Section 3.3.1 of [](#RFC4592)), and for the source of synthesis you
also need the closest encloser.

This is why the largest denial of existence response with NSEC3, contains
three records:

* A record where the original owner name of the NSEC3 is the closest encloser;
* A record which covers the next closer. This is the actual proof that
    the requested name does not exist;
* A records which matches (or covers) the wildcard.

MG: Note that the last entire record carries only one bit of information (is there a wildcard presence?).

When looking closely to the information send to a validator you can make
the following observations:

1. The closest encloser can be inferred from the data sent;
2. It is often not needed to explicitly send the closest encloser;
3. The wildcard presence can be encoded with a flag bit.

We present a new record NSEC4 that is similar to NSEC3 ([](#RFC5155)), but
differs in two ways:

1. It has a new flag bit, the Wildcard Flag (see [](#wildcard-flag);
2. It allows for unhashed records, by setting the algorithm code to zero,
    see ()[#hash-algorithm].

With NSEC4 you will need a maximum of two records for any denial
of existence response. Thus we save one record and accompanying
signature(s).

By defining hash algorithm zero to mean that no hashing MUST be applied,
we also fold back NSEC into NSEC4. With this change we collapse NSEC
and NSEC3 into one new record to leave only one form of authenticated
denial of existence in the DNS.

## Requirements

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
"OPTIONAL" in this document are to be interpreted as described in [](#RFC2119).

## Terminology

The same terminology is used throughout this document as in Section 1.3
from [](#RFC5155), with the following changes:

Opt-Out NSEC4 RR:

:   a NSEC4 RR that has the Opt-Out flag set to 1.

Wildcard NSEC4 RR:

:   a NSEC4 RR that has the Wildcard flag set to 1.

Opt-Out zone:

:   a zone with at least one Opt-Out NSEC4 RR.

Base32:

:   the "Base 32 Encoding with Extended Hex Alphabet" as specified in
    [](#RFC4648). Note that trailing padding characters ("=") are
    not used in the NSEC4 specification.

To cover:

:   When a hash algorithm is defined,
    a NSEC4 RR is said to "cover" a name if the hash of the name or
    "next closer" name falls between the owner name and the next hashed
    owner name of the NSEC4. When no hash algorithm is defined, a NSEC4 RR is
    said to "cover" a name if the name or "next closer" name falls between
    the owner name and the next owner name of the NSEC4. In other words, if
    it proves the nonexistence of the name, either directly or by proving the
    nonexistence of an ancestor of the name.

To match:

:   When a hash algorithm is defined, a NSEC4 RR is said to "match" a name
    if the owner name of the NSEC4 RR is the same as the hashed owner name
    of that name. When no hash algorithm is defined, a NSEC4 RR is said to
    "match" a name if the name and the owner name of the NSEC4 RR are equal.

# Backwards Compatibility

This specification describes a protocol change that is not generally
backwards compatible with the existing DNSSEC family RFCs. 
In particular, security-aware resolvers that are unaware of this
specification (NSEC4-unaware resolvers) may fail to validate the
responses introduced by this document.

MM: We need an approach for backwards compatibility.

